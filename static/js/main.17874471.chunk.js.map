{"version":3,"sources":["contexts/SpeedContext.ts","components/Bar.tsx","components/SortContainer.tsx","icons/snail.tsx","icons/rocket.tsx","icons/play.tsx","icons/next.tsx","icons/prev.tsx","icons/lessBars.tsx","icons/moreBars.tsx","components/Controls.tsx","components/SortOptions.tsx","constants.ts","App.tsx","index.tsx"],"names":["defaultSpeeds","operationsInterval","swapAnimationDuration","SpeedContext","createContext","BarComponent","styled","div","attrs","props","style","height","width","position","display","marginRight","flexDirection","justifyContent","alignItems","paddingBottom","border","borderTop","isCurrent","background","transform","xPos","transition","zIndex","opacity","barMoving","finishedSorting","Bar","value","hideVal","barRef","useRef","ref","bottom","color","Container","SortContainer","counter","inputArr","initialInputArr","currentBar","barCount","useState","xPositions","setXPositions","movingBars","setMovingBars","setWidth","sortContainerDimensions","setSortContainerDimensions","speedContext","useContext","setContainerDimensions","container","document","getElementById","getBoundingClientRect","useEffect","window","addEventListener","_","removeEventListener","prev","map","length","offsets","i","iidx","id","push","newMovingBars","idx","filter","backgroundColor","includes","val","snailIcon","viewBox","fill","xmlns","d","rocketIcon","playIcon","nextIcon","x","y","rx","prevIcon","lessBarsIcon","moreBarsIcon","ControlsContainer","PlayButton","button","StepButton","SliderContainer","Controls","offset","currentSorter","handleSorting","playPauseButton","isSortingFinished","setSliderVal","sliderVal","stepBackRef","stepForwardRef","isCurrentlySorting","setBarCount","disabled","onClick","marginTop","gridTemplateRows","placeItems","gap","type","direction","min","max","onChange","e","parseInt","target","toFixed","fontSize","current","Title","h1","SorterSelect","select","BlackButton","SortOptions","reset","setCurrentSorter","selectedSorterName","selectedOptions","textContent","name","fn","sorter","right","top","__prodServer","Main","App","setInputArr","setIsSortingFinished","setCounter","counterRef","setCurrentBar","sortedArr","sortDelayCounter","inputArrs","setInputArrs","currentBars","setCurrentBars","setOffset","setSpeedContext","detailsRef","siteViewCount","setSiteViewCount","wakeupReq","fetch","visitReq","Promise","all","then","reqs","forEach","req","json","data","status","count","console","log","initialArr","Array","from","Math","floor","random","sort","a","b","newOpsInterval","inputArrsLength","newInputArr","newCurrentBars","err","querySelectorAll","p","init","useCallback","j","finish","innerHTML","getCurrentSpeed","bubbleSort","ops","setTimeout","temp","insertionSort","key","c","selectionSort","lowestPos","mergeSort","l","h","mid","start","end","slice","start2","merge","quickSort","comparisonIdx","stack","isPartitioning","pivot","option","idxs","shellSort","alert","margin","maxHeight","currentTarget","overflowY","marginLeft","Index","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.17874471.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport { Dispatch, SetStateAction } from \"react\";\n\nexport type SpeedContextType = {\n  operationsInterval: number;\n  swapAnimationDuration: number;\n};\n\ntype SpeedContextState = {\n  speedContext: SpeedContextType;\n  setSpeedContext: Dispatch<SetStateAction<SpeedContextType>>;\n};\n\nexport const defaultSpeeds: SpeedContextType = {\n  operationsInterval: 500,\n  swapAnimationDuration: 350,\n};\n\n// @ts-ignore\nconst SpeedContext = createContext<SpeedContextState>(null);\n\nexport default SpeedContext;\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\n\ninterface props {\n  height: number;\n  active?: boolean;\n  width: number;\n  xPos: number;\n  value?: number;\n  barMoving: boolean;\n  finishedSorting: boolean;\n  isCurrent: boolean;\n  hideVal: boolean;\n  swapAnimationDuration: number;\n}\n\nconst BarComponent = styled.div.attrs<props>((props) => ({\n  style: {\n    height: props.height + \"px\",\n    width: props.width + \"px\",\n    position: \"relative\",\n    display: \"flex\",\n    marginRight: props.width / 3 + \"px\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    paddingBottom: \"10px\",\n    border: \"none\",\n    borderTop: `${props.isCurrent ? 10 : 0}px solid white`,\n    background:\n      \"linear-gradient(0deg, rgba(0,83,206,1) 0%, rgba(60,75,231,1) 100%)\",\n    transform: `translateX(${props.xPos}px)`,\n    transition: `all ${\n      props.swapAnimationDuration / 1000\n    }s cubic-bezier(0.85, 0, 0.15, 1),\n    opacity 0.05s ease-in-out,\n    background 0.2s ease-in-out,\n    border 0.15s ease-in-out,\n    width 0.1s ease-in-out`,\n    zIndex: \"1\",\n    opacity: props.barMoving || props.finishedSorting ? \"1\" : \"0.6\",\n  },\n}))<props>`\n  &::before {\n    position: absolute;\n    content: \"\";\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: \"\";\n    z-index: 2;\n    transition: opacity 0.1s ease-in-out;\n    opacity: 0;\n    /* props.barMoving || props.finishedSorting */\n  }\n`;\n\nconst Bar: React.FC<props> = ({\n  width,\n  height,\n  xPos,\n  value,\n  barMoving,\n  finishedSorting,\n  isCurrent,\n  hideVal,\n  swapAnimationDuration,\n}) => {\n  const barRef = useRef<HTMLDivElement>(null);\n\n  // const move = useCallback(\n  //   (xPos: number) => {\n  //     anime({\n  //       targets: [barRef.current],\n  //       translateX: xPos,\n  //       easing: \"easeInOutCirc\",\n  //       duration: speedContext.swapAnimationDuration,\n  //     });\n  //   },\n  //   [speedContext.swapAnimationDuration]\n  // );\n\n  // useLayoutEffect(() => {\n  //   move(xPosProp);\n  //   // setXPos()\n  // }, [xPosProp, move]);\n\n  // const move = (xPos: number) => {\n  //   anime({\n  //     targets: [barRef.current],\n  //     translateX: xPos,\n  //     easing: \"easeInOutCirc\",\n  //     duration: speedContext.swapAnimationDuration,\n  //   });\n  // };\n\n  return (\n    <div>\n      <BarComponent\n        isCurrent={isCurrent}\n        ref={barRef}\n        height={height}\n        width={width}\n        xPos={xPos}\n        barMoving={barMoving}\n        finishedSorting={finishedSorting}\n        hideVal={hideVal}\n        swapAnimationDuration={swapAnimationDuration}\n      >\n        {!hideVal && (\n          <span style={{ position: \"absolute\", bottom: \"-30\", color: \"white\" }}>\n            {value && value}\n          </span>\n        )}\n      </BarComponent>\n    </div>\n  );\n};\n\nexport default Bar;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Input } from \"../App\";\nimport SpeedContext from \"../contexts/SpeedContext\";\nimport Bar from \"./Bar\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  position: relative;\n  height: 100vh;\n  overflow: hidden;\n`;\n\ninterface props {\n  barCount: number;\n  counter: number;\n  inputArr: Input[];\n  initialInputArr: Input[];\n  finishedSorting: boolean;\n  currentBar: number[];\n}\n\nconst SortContainer: React.FC<props> = ({\n  counter,\n  inputArr,\n  initialInputArr,\n  finishedSorting,\n  currentBar,\n  barCount,\n}) => {\n  const [xPositions, setXPositions] = useState<number[]>([]);\n  const [movingBars, setMovingBars] = useState<number[]>([]);\n  const [width, setWidth] = useState(20);\n  const [sortContainerDimensions, setSortContainerDimensions] = useState({\n    width: 1000,\n    height: 700,\n  });\n  const { speedContext } = useContext(SpeedContext);\n\n  // reset positions\n\n  const setContainerDimensions = () => {\n    const container = document.getElementById(\"sortContainer\");\n    if (container)\n      setSortContainerDimensions({\n        height: container.getBoundingClientRect().height,\n        width: container.getBoundingClientRect().width - 12 * 2 * 2,\n      });\n  };\n  useEffect(() => {\n    window.addEventListener(\"resize\", (_) => {\n      setContainerDimensions();\n    });\n    return () => window.removeEventListener(\"resize\", () => {});\n  }, []);\n\n  useEffect(() => {\n    setContainerDimensions();\n  }, []);\n\n  useEffect(() => {\n    setWidth((sortContainerDimensions.width * 0.75) / barCount);\n  }, [barCount, sortContainerDimensions.width]);\n\n  useEffect(() => {\n    if (!finishedSorting) {\n      setMovingBars([]);\n      setXPositions((prev) => prev.map((_) => 0));\n    }\n  }, [finishedSorting]);\n\n  useEffect(() => {\n    if (currentBar[0] === -1) {\n      setMovingBars([]);\n    }\n  }, [currentBar]);\n\n  useEffect(() => {\n    if (inputArr.length !== 0 && counter > 0) {\n      setMovingBars([]);\n      // if the inputArr is not empty\n      // hard coded barwidth\n      // TODO: make it dynamic based on bar width on DOM\n      const offsets = [];\n      // create a new empty offsets array\n      for (let i = 0; i < initialInputArr.length; i++) {\n        // loop through the initInputs and inputs\n        for (let iidx = 0; iidx < inputArr.length; iidx++) {\n          // if the position of the element has advanced to the left or right of the array\n          // for ex.\n          // [0, 1, 2] <- initArr\n          // [1, 0, 2] <- inputArr\n          // 1 has moved -1 indexes and 0 has moved +1 indexes\n          if (inputArr[iidx].id === i) {\n            // if the inputArr offset elements are detected, calculate offset and push it\n            // (initArrPos - inputArrPos) * barWidth\n            offsets.push((iidx - i) * (width + width / 3));\n            break;\n          }\n        }\n      }\n\n      const newMovingBars = offsets\n        .map((i, idx) => ({ i, idx }))\n        .filter((i, idx) => i.i !== xPositions[idx] && i.i !== 0)\n        // remove the bars where the value of offset is 0 and has the same previous offset values\n        .map((i) => i.idx);\n\n      setXPositions(offsets);\n      setMovingBars(newMovingBars);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputArr]);\n\n  useEffect(() => {\n    setXPositions([...initialInputArr.map((_) => 0)]);\n    setMovingBars([]);\n  }, [initialInputArr]);\n\n  return (\n    <Container id=\"sortContainer\" style={{ backgroundColor: \"#AAD6FF\" }}>\n      {initialInputArr.map((i, idx) => {\n        return (\n          <Bar\n            isCurrent={currentBar.includes(i.id)}\n            xPos={xPositions[idx]}\n            height={(i.val / barCount) * (sortContainerDimensions.height - 50)}\n            width={width}\n            key={i.id}\n            value={i.val}\n            barMoving={movingBars.includes(idx)}\n            finishedSorting={finishedSorting}\n            hideVal={width < 20}\n            swapAnimationDuration={speedContext.swapAnimationDuration}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport default SortContainer;\n","const snailIcon = () =>\n  // prettier-ignore\n  <svg  viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M21.1211 8.0625C21.4401 8.19922 21.7298 8.37826 21.9902 8.59961C22.2507 8.82096 22.472 9.07161 22.6543 9.35156C22.8366 9.63151 22.9766 9.9375 23.0742 10.2695C23.1784 10.5951 23.2305 10.9303 23.2305 11.2754C23.2305 11.627 23.1784 11.9655 23.0742 12.291C22.9766 12.6165 22.8333 12.9193 22.6445 13.1992C22.4622 13.4792 22.2409 13.7298 21.9805 13.9512C21.7266 14.1725 21.4401 14.3548 21.1211 14.498V17.5938C21.1211 18.1797 21.0495 18.7331 20.9062 19.2539C20.763 19.7812 20.5514 20.263 20.2715 20.6992C19.998 21.1419 19.653 21.5358 19.2363 21.8809C18.8197 22.2259 18.3379 22.5124 17.791 22.7402C17.4264 22.89 17.0521 23.0039 16.668 23.082C16.2839 23.1667 15.8965 23.209 15.5059 23.209H0.769531C0.769531 23.0072 0.766276 22.8053 0.759766 22.6035C0.753255 22.4082 0.75 22.2064 0.75 21.998C0.75 21.8092 0.798828 21.5781 0.896484 21.3047C1.00065 21.0378 1.1276 20.7676 1.27734 20.4941C1.42708 20.2207 1.58659 19.9635 1.75586 19.7227C1.92513 19.4883 2.07812 19.3027 2.21484 19.166C1.74609 18.5345 1.38802 17.8444 1.14062 17.0957C0.893229 16.347 0.769531 15.5788 0.769531 14.791C0.769531 14.0228 0.873698 13.3001 1.08203 12.623C1.29688 11.9395 1.5931 11.3112 1.9707 10.7383C2.35482 10.1654 2.80729 9.65104 3.32812 9.19531C3.85547 8.73958 4.43164 8.35547 5.05664 8.04297C5.68164 7.72396 6.34245 7.48307 7.03906 7.32031C7.74219 7.15104 8.46159 7.06641 9.19727 7.06641C9.7181 7.06641 10.2194 7.10872 10.7012 7.19336C10.5124 6.93945 10.3626 6.70182 10.252 6.48047C10.1478 6.25911 10.0697 6.03451 10.0176 5.80664C9.96549 5.57227 9.92969 5.33138 9.91016 5.08398C9.89714 4.83659 9.89062 4.5599 9.89062 4.25391C9.89062 3.77214 9.98177 3.31966 10.1641 2.89648C10.3529 2.4668 10.6068 2.0957 10.9258 1.7832C11.2448 1.46419 11.6159 1.21354 12.0391 1.03125C12.4688 0.842448 12.9245 0.748047 13.4062 0.748047C13.9596 0.748047 14.4805 0.871745 14.9688 1.11914C15.4635 1.36654 15.877 1.71159 16.209 2.1543C16.541 1.71159 16.9544 1.36654 17.4492 1.11914C17.944 0.871745 18.4681 0.748047 19.0215 0.748047C19.5033 0.748047 19.9557 0.842448 20.3789 1.03125C20.8086 1.21354 21.1797 1.46419 21.4922 1.7832C21.8112 2.0957 22.0618 2.4668 22.2441 2.89648C22.4329 3.31966 22.5273 3.77214 22.5273 4.25391V4.95703C22.5273 5.23047 22.4915 5.50065 22.4199 5.76758C22.3483 6.03451 22.2507 6.29167 22.127 6.53906C22.0033 6.77995 21.8535 7.01107 21.6777 7.23242C21.5085 7.44727 21.3229 7.64258 21.1211 7.81836V8.0625ZM19.7246 13.3848C20.0176 13.3848 20.291 13.3294 20.5449 13.2188C20.7988 13.1081 21.0202 12.9583 21.209 12.7695C21.3978 12.5742 21.5475 12.3496 21.6582 12.0957C21.7689 11.8418 21.8242 11.5684 21.8242 11.2754C21.8242 10.9824 21.7689 10.709 21.6582 10.4551C21.5475 10.2012 21.3978 9.97982 21.209 9.79102C21.0202 9.60221 20.7988 9.45247 20.5449 9.3418C20.291 9.23112 20.0176 9.17578 19.7246 9.17578V7.06641C19.9134 6.96875 20.0924 6.84505 20.2617 6.69531C20.431 6.54557 20.5775 6.37956 20.7012 6.19727C20.8314 6.01497 20.9323 5.81966 21.0039 5.61133C21.082 5.39648 21.1211 5.17839 21.1211 4.95703V4.25391C21.1211 3.96094 21.0658 3.6875 20.9551 3.43359C20.8444 3.17969 20.6947 2.95833 20.5059 2.76953C20.3171 2.58073 20.0957 2.43099 19.8418 2.32031C19.5879 2.20964 19.3145 2.1543 19.0215 2.1543C18.7285 2.1543 18.4551 2.20964 18.2012 2.32031C17.9473 2.43099 17.7227 2.58073 17.5273 2.76953C17.3385 2.95833 17.1888 3.17969 17.0781 3.43359C16.9674 3.6875 16.9121 3.96094 16.9121 4.25391V4.95703C16.9121 5.1849 16.9479 5.40299 17.0195 5.61133C17.0911 5.81966 17.1888 6.01823 17.3125 6.20703C17.4427 6.38932 17.5924 6.55534 17.7617 6.70508C17.9375 6.84831 18.123 6.96875 18.3184 7.06641C18.3184 7.3724 18.2663 7.6556 18.1621 7.91602C18.0579 8.17643 17.9115 8.40104 17.7227 8.58984C17.5404 8.77214 17.319 8.91536 17.0586 9.01953C16.7982 9.1237 16.515 9.17578 16.209 9.17578C15.903 9.17578 15.6198 9.1237 15.3594 9.01953C15.1055 8.91536 14.8841 8.76888 14.6953 8.58008C14.513 8.39128 14.3698 8.16992 14.2656 7.91602C14.1615 7.6556 14.1094 7.3724 14.1094 7.06641C14.2982 6.96875 14.4772 6.84505 14.6465 6.69531C14.8158 6.54557 14.9622 6.37956 15.0859 6.19727C15.2161 6.01497 15.3171 5.81966 15.3887 5.61133C15.4668 5.39648 15.5059 5.17839 15.5059 4.95703V4.25391C15.5059 3.96094 15.4505 3.6875 15.3398 3.43359C15.2292 3.17969 15.0794 2.95833 14.8906 2.76953C14.7018 2.58073 14.4805 2.43099 14.2266 2.32031C13.9727 2.20964 13.6992 2.1543 13.4062 2.1543C13.1133 2.1543 12.8398 2.20964 12.5859 2.32031C12.332 2.43099 12.1074 2.58073 11.9121 2.76953C11.7233 2.95833 11.5736 3.17969 11.4629 3.43359C11.3522 3.6875 11.2969 3.96094 11.2969 4.25391V4.95703C11.2969 5.1849 11.3327 5.40299 11.4043 5.61133C11.4759 5.81966 11.5736 6.01823 11.6973 6.20703C11.8275 6.38932 11.9772 6.55534 12.1465 6.70508C12.3223 6.84831 12.5078 6.96875 12.7031 7.06641V9.3418C13.1979 9.60872 13.6602 9.93424 14.0898 10.3184C14.5195 10.7025 14.8906 11.1289 15.2031 11.5977C15.5221 12.0664 15.7695 12.571 15.9453 13.1113C16.1276 13.6517 16.2188 14.2116 16.2188 14.791H13.4062C13.4062 15.6048 13.2663 16.3535 12.9863 17.0371C12.7064 17.7207 12.3158 18.3132 11.8145 18.8145C11.3132 19.3158 10.7174 19.7064 10.0273 19.9863C9.34375 20.2663 8.59831 20.4062 7.79102 20.4062C7.17904 20.4062 6.58333 20.3249 6.00391 20.1621C5.42448 19.9993 4.89062 19.7324 4.40234 19.3613C4.15495 19.4655 3.91081 19.6022 3.66992 19.7715C3.43555 19.9408 3.21745 20.1296 3.01562 20.3379C2.8138 20.5527 2.63802 20.7839 2.48828 21.0312C2.34505 21.2786 2.24089 21.5358 2.17578 21.8027H15.5059C15.7663 21.8027 16.0234 21.7767 16.2773 21.7246C16.5378 21.6725 16.7917 21.6042 17.0391 21.5195C17.944 21.207 18.6178 20.709 19.0605 20.0254C19.5033 19.3483 19.7246 18.5378 19.7246 17.5938V13.3848ZM4.27539 14.4395C4.27539 14.8301 4.33073 15.2077 4.44141 15.5723C4.55208 15.9303 4.70833 16.2656 4.91016 16.5781C5.11849 16.8841 5.36914 17.1576 5.66211 17.3984C5.95508 17.6393 6.2806 17.8379 6.63867 17.9941C6.84701 18.0853 7.06185 18.1602 7.2832 18.2188C7.50456 18.2708 7.73242 18.2969 7.9668 18.2969C8.25977 18.2969 8.54297 18.2741 8.81641 18.2285C9.09635 18.1829 9.37305 18.1048 9.64648 17.9941C9.99805 17.8509 10.3171 17.6556 10.6035 17.4082C10.8965 17.1608 11.1439 16.8809 11.3457 16.5684C11.554 16.2559 11.7135 15.9173 11.8242 15.5527C11.9414 15.1882 12 14.8171 12 14.4395C12 13.9056 11.8991 13.4043 11.6973 12.9355C11.4954 12.4668 11.2188 12.0566 10.8672 11.7051C10.5221 11.3535 10.1152 11.0768 9.64648 10.875C9.17773 10.6732 8.67643 10.5723 8.14258 10.5723C7.60872 10.5723 7.10742 10.6732 6.63867 10.875C6.16992 11.0768 5.75977 11.3535 5.4082 11.7051C5.05664 12.0566 4.77995 12.4668 4.57812 12.9355C4.3763 13.4043 4.27539 13.9056 4.27539 14.4395ZM8.14258 17.5938C7.70638 17.5938 7.29622 17.5124 6.91211 17.3496C6.52799 17.1803 6.19271 16.9557 5.90625 16.6758C5.61979 16.3893 5.39193 16.054 5.22266 15.6699C5.0599 15.2858 4.97852 14.8757 4.97852 14.4395C4.97852 14.0033 5.0599 13.5931 5.22266 13.209C5.39193 12.8249 5.61979 12.4896 5.90625 12.2031C6.19271 11.9167 6.52799 11.6921 6.91211 11.5293C7.29622 11.36 7.70638 11.2754 8.14258 11.2754C8.57878 11.2754 8.98893 11.36 9.37305 11.5293C9.75716 11.6921 10.0892 11.9167 10.3691 12.2031C10.6556 12.4896 10.8802 12.8249 11.043 13.209C11.2122 13.5931 11.2969 14.0033 11.2969 14.4395C11.2969 14.8691 11.2122 15.276 11.043 15.6602C10.8737 16.0378 10.6458 16.3698 10.3594 16.6562C10.0729 16.9427 9.73763 17.1706 9.35352 17.3398C8.97591 17.5091 8.57227 17.5938 8.14258 17.5938ZM16.5605 17.5938C16.7038 17.5938 16.8405 17.623 16.9707 17.6816C17.1009 17.7337 17.2116 17.8086 17.3027 17.9062C17.4004 17.9974 17.4753 18.1081 17.5273 18.2383C17.5859 18.3685 17.6152 18.5052 17.6152 18.6484C17.6152 18.7917 17.5859 18.9251 17.5273 19.0488C17.4753 19.179 17.4004 19.293 17.3027 19.3906C17.2051 19.4883 17.0911 19.5632 16.9609 19.6152C16.8372 19.6738 16.7038 19.7031 16.5605 19.7031C16.4173 19.7031 16.2806 19.6738 16.1504 19.6152C16.0267 19.5632 15.916 19.4883 15.8184 19.3906C15.7207 19.293 15.6426 19.179 15.584 19.0488C15.5319 18.9251 15.5059 18.7917 15.5059 18.6484C15.5059 18.5052 15.5319 18.3717 15.584 18.248C15.6426 18.1178 15.7207 18.0039 15.8184 17.9062C15.916 17.8086 16.0267 17.7337 16.1504 17.6816C16.2806 17.623 16.4173 17.5938 16.5605 17.5938ZM7.08789 14.4395C7.08789 14.5892 7.11393 14.7292 7.16602 14.8594C7.22461 14.9831 7.30273 15.0905 7.40039 15.1816C7.49805 15.2728 7.60872 15.3477 7.73242 15.4062C7.86263 15.4583 7.99935 15.4844 8.14258 15.4844C8.28581 15.4844 8.41927 15.4583 8.54297 15.4062C8.67318 15.3477 8.78385 15.2728 8.875 15.1816C8.97266 15.084 9.04753 14.9733 9.09961 14.8496C9.1582 14.7194 9.1875 14.5827 9.1875 14.4395C9.1875 14.2962 9.1582 14.1628 9.09961 14.0391C9.04753 13.9089 8.97591 13.7949 8.88477 13.6973C8.79362 13.5996 8.68294 13.5247 8.55273 13.4727C8.42253 13.4141 8.28581 13.3848 8.14258 13.3848C7.99284 13.3848 7.85286 13.4141 7.72266 13.4727C7.59896 13.5247 7.48828 13.5996 7.39062 13.6973C7.29948 13.7884 7.22461 13.8991 7.16602 14.0293C7.11393 14.1595 7.08789 14.2962 7.08789 14.4395ZM19.7246 4.25391V4.95703C19.7246 5.14583 19.653 5.31185 19.5098 5.45508C19.373 5.5918 19.2103 5.66016 19.0215 5.66016C18.8262 5.66016 18.6602 5.5918 18.5234 5.45508C18.3867 5.31836 18.3184 5.15234 18.3184 4.95703V4.25391C18.3184 4.0651 18.3867 3.90234 18.5234 3.76562C18.6667 3.62891 18.8327 3.56055 19.0215 3.56055C19.2103 3.56055 19.373 3.62891 19.5098 3.76562C19.653 3.90234 19.7246 4.0651 19.7246 4.25391ZM14.1094 4.25391V4.95703C14.1094 5.14583 14.0378 5.31185 13.8945 5.45508C13.7578 5.5918 13.5951 5.66016 13.4062 5.66016C13.2109 5.66016 13.0449 5.5918 12.9082 5.45508C12.7715 5.31836 12.7031 5.15234 12.7031 4.95703V4.25391C12.7031 4.0651 12.7715 3.90234 12.9082 3.76562C13.0514 3.62891 13.2174 3.56055 13.4062 3.56055C13.5951 3.56055 13.7578 3.62891 13.8945 3.76562C14.0378 3.90234 14.1094 4.0651 14.1094 4.25391ZM16.9121 15.4844C17.1009 15.4844 17.2637 15.556 17.4004 15.6992C17.5436 15.8359 17.6152 15.9987 17.6152 16.1875C17.6152 16.3828 17.5469 16.5488 17.4102 16.6855C17.2734 16.8223 17.1074 16.8906 16.9121 16.8906C16.7168 16.8906 16.5508 16.8223 16.4141 16.6855C16.2773 16.5488 16.209 16.3828 16.209 16.1875C16.209 15.9987 16.2773 15.8359 16.4141 15.6992C16.5573 15.556 16.7233 15.4844 16.9121 15.4844ZM14.1094 18.2969C14.2982 18.2969 14.4609 18.3685 14.5977 18.5117C14.7344 18.6484 14.8027 18.8112 14.8027 19C14.8027 19.1888 14.7344 19.3516 14.5977 19.4883C14.4609 19.6315 14.2982 19.7031 14.1094 19.7031C13.9141 19.7031 13.748 19.6348 13.6113 19.498C13.4746 19.3613 13.4062 19.1953 13.4062 19C13.4062 18.8047 13.4746 18.6387 13.6113 18.502C13.748 18.3652 13.9141 18.2969 14.1094 18.2969Z\" />\n</svg>;\n\nexport default snailIcon;\n","// prettier-ignore\nconst rocketIcon = () => <svg  viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M23.2305 0.748047V2.1543C23.2305 3.15039 23.1328 4.13021 22.9375 5.09375C22.7487 6.05078 22.4655 6.97852 22.0879 7.87695C21.7168 8.77539 21.2578 9.63477 20.7109 10.4551C20.1706 11.2689 19.5488 12.0273 18.8457 12.7305L16.209 15.3672V19.5762L12.7031 23.0918L10.2129 20.6016L7.82031 21.4023C7.41667 21.7669 6.99349 22.0664 6.55078 22.3008C6.10807 22.5352 5.64909 22.7174 5.17383 22.8477C4.70508 22.9844 4.22005 23.0788 3.71875 23.1309C3.21745 23.1829 2.70312 23.209 2.17578 23.209H0.769531C0.769531 22.4928 0.779297 21.8158 0.798828 21.1777C0.818359 20.5397 0.883464 19.931 0.994141 19.3516C1.11133 18.7786 1.29036 18.2285 1.53125 17.7012C1.77865 17.1738 2.12695 16.6595 2.57617 16.1582L3.37695 13.7656L0.886719 11.2754L4.40234 7.76953H8.61133L11.248 5.13281C11.9512 4.42969 12.7096 3.80794 13.5234 3.26758C14.3438 2.7207 15.2031 2.26172 16.1016 1.89062C17 1.51302 17.9277 1.22982 18.8848 1.04102C19.8483 0.845703 20.8281 0.748047 21.8242 0.748047H23.2305ZM17.8594 11.7344C18.3281 11.2656 18.7578 10.7676 19.1484 10.2402C19.5456 9.70638 19.9036 9.14648 20.2227 8.56055L15.418 3.75586C14.832 4.07487 14.2721 4.43294 13.7383 4.83008C13.2109 5.2207 12.7129 5.65039 12.2441 6.11914L4.97852 13.3848L10.5938 19L17.8594 11.7344ZM20.5449 7.89648C20.9681 6.99154 21.2871 6.05729 21.502 5.09375C21.7168 4.13021 21.8242 3.15039 21.8242 2.1543C20.8281 2.1543 19.8451 2.26172 18.875 2.47656C17.9115 2.6849 16.9805 3.00391 16.082 3.43359C17.5729 4.91797 19.0605 6.4056 20.5449 7.89648ZM14.8027 7.06641C15.0957 7.06641 15.3691 7.12174 15.623 7.23242C15.877 7.3431 16.0983 7.49609 16.2871 7.69141C16.4824 7.88021 16.6354 8.10156 16.7461 8.35547C16.8568 8.60938 16.9121 8.88281 16.9121 9.17578C16.9121 9.46224 16.8568 9.73568 16.7461 9.99609C16.6354 10.25 16.4824 10.4714 16.2871 10.6602C16.0983 10.849 15.8737 10.9987 15.6133 11.1094C15.3594 11.2201 15.0892 11.2754 14.8027 11.2754C14.5163 11.2754 14.2428 11.2201 13.9824 11.1094C13.7285 10.9987 13.5072 10.849 13.3184 10.6602C13.1296 10.4714 12.9798 10.25 12.8691 9.99609C12.7585 9.73568 12.7031 9.46224 12.7031 9.17578C12.7031 8.88932 12.7585 8.61914 12.8691 8.36523C12.9798 8.10482 13.1296 7.88021 13.3184 7.69141C13.5072 7.49609 13.7285 7.3431 13.9824 7.23242C14.2428 7.12174 14.5163 7.06641 14.8027 7.06641ZM2.17578 21.8027C2.63802 21.8027 3.10677 21.7767 3.58203 21.7246C4.0638 21.679 4.5293 21.5846 4.97852 21.4414C5.42773 21.3047 5.85091 21.1126 6.24805 20.8652C6.64518 20.6243 6.99674 20.3086 7.30273 19.918L6.56055 19.1758C6.35221 19.3906 6.13411 19.5697 5.90625 19.7129C5.67839 19.8626 5.4375 19.9831 5.18359 20.0742C4.9362 20.1719 4.67904 20.2435 4.41211 20.2891C4.14518 20.3411 3.86523 20.3802 3.57227 20.4062C3.59831 20.1133 3.63411 19.8333 3.67969 19.5664C3.73177 19.2995 3.80339 19.0423 3.89453 18.7949C3.99219 18.541 4.11263 18.3001 4.25586 18.0723C4.4056 17.8444 4.58789 17.6263 4.80273 17.418L4.06055 16.6758C3.66992 16.9818 3.35091 17.3333 3.10352 17.7305C2.86263 18.1276 2.67057 18.5508 2.52734 19C2.39062 19.4492 2.29622 19.9115 2.24414 20.3867C2.19857 20.8685 2.17578 21.3405 2.17578 21.8027ZM4.48047 12.8867L8.20117 9.17578H4.97852L2.87891 11.2754L4.48047 12.8867ZM14.8027 15.7773L11.0918 19.498L12.7031 21.0996L14.8027 19V15.7773ZM14.8027 10.5723C14.998 10.5723 15.1803 10.5365 15.3496 10.4648C15.5189 10.3932 15.6654 10.2956 15.7891 10.1719C15.9193 10.0417 16.0202 9.89193 16.0918 9.72266C16.1699 9.55339 16.209 9.37109 16.209 9.17578C16.209 8.98047 16.1699 8.79818 16.0918 8.62891C16.0202 8.45964 15.9193 8.31315 15.7891 8.18945C15.6654 8.05924 15.5189 7.95833 15.3496 7.88672C15.1803 7.80859 14.998 7.76953 14.8027 7.76953C14.6074 7.76953 14.4251 7.80859 14.2559 7.88672C14.0866 7.95833 13.9368 8.05924 13.8066 8.18945C13.6829 8.31315 13.5853 8.45964 13.5137 8.62891C13.4421 8.79818 13.4062 8.98047 13.4062 9.17578C13.4062 9.37109 13.4421 9.55339 13.5137 9.72266C13.5853 9.89193 13.6829 10.0417 13.8066 10.1719C13.9368 10.2956 14.0866 10.3932 14.2559 10.4648C14.4251 10.5365 14.6074 10.5723 14.8027 10.5723ZM7.78125 15.8457C7.78125 15.748 7.81706 15.6634 7.88867 15.5918L11.4043 12.0859C11.4694 12.0208 11.5508 11.9883 11.6484 11.9883C11.7396 11.9883 11.8177 12.0241 11.8828 12.0957C11.9544 12.1608 11.9902 12.2389 11.9902 12.3301C11.9902 12.4277 11.9577 12.5091 11.8926 12.5742L8.38672 16.0898C8.3151 16.1615 8.23047 16.1973 8.13281 16.1973C8.04167 16.1973 7.96029 16.1615 7.88867 16.0898C7.81706 16.0182 7.78125 15.9368 7.78125 15.8457Z\" />\n</svg>\n\nexport default rocketIcon;\n","// prettier-ignore\nconst playIcon = () => <svg viewBox=\"0 0 34 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 37.3713V2.43737C0 0.903735 1.65505 -0.0592372 2.98833 0.698632L32.1 17.2463C33.4131 17.9927 33.4567 19.8695 32.1796 20.676L3.06799 39.0623C1.73625 39.9034 0 38.9465 0 37.3713Z\" fill=\"#7F7F7F\"/>\n</svg>\n\nexport default playIcon;\n","// prettier-ignore\nconst nextIcon = () => <svg viewBox=\"0 0 21 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0.592529 19.4916V2.117C0.592529 1.35424 1.41567 0.875302 2.07879 1.25223L16.5576 9.48229C17.2107 9.85352 17.2324 10.7869 16.5972 11.1881L2.11841 20.3326C1.45606 20.7509 0.592529 20.275 0.592529 19.4916Z\" fill=\"#7F7F7F\"/>\n<rect x=\"17\" y=\"1\" width=\"4\" height=\"20\" rx=\"2\" fill=\"#7F7F7F\"/>\n</svg>\n\nexport default nextIcon;\n","// prettier-ignore\nconst prevIcon = () => <svg  viewBox=\"0 0 21 22\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M20.4075 2.50842L20.4075 19.883C20.4075 20.6458 19.5843 21.1247 18.9212 20.7478L4.4424 12.5177C3.78932 12.1465 3.76765 11.2131 4.40279 10.8119L18.8816 1.66741C19.5439 1.24909 20.4075 1.72504 20.4075 2.50842Z\" fill=\"#7F7F7F\"/>\n<rect x=\"4\" y=\"21\" width=\"4\" height=\"20\" rx=\"2\" transform=\"rotate(-180 4 21)\" fill=\"#7F7F7F\"/>\n</svg>\n\nexport default prevIcon;\n","// prettier-ignore\nconst lessBarsIcon = () => <svg width=\"34\" height=\"31\" viewBox=\"0 0 34 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 13C0 12.4477 0.447715 12 1 12H6C6.55228 12 7 12.4477 7 13V30C7 30.5523 6.55228 31 6 31H1C0.447715 31 0 30.5523 0 30V13Z\" fill=\"#3FD08F\"/>\n<path d=\"M9 1C9 0.447716 9.44772 0 10 0H15C15.5523 0 16 0.447715 16 1V30C16 30.5523 15.5523 31 15 31H10C9.44772 31 9 30.5523 9 30V1Z\" fill=\"#3FD08F\"/>\n<path d=\"M18 6C18 5.44772 18.4477 5 19 5H24C24.5523 5 25 5.44772 25 6V30C25 30.5523 24.5523 31 24 31H19C18.4477 31 18 30.5523 18 30V6Z\" fill=\"#3FD08F\"/>\n<path d=\"M27 11C27 10.4477 27.4477 10 28 10H33C33.5523 10 34 10.4477 34 11V30C34 30.5523 33.5523 31 33 31H28C27.4477 31 27 30.5523 27 30V11Z\" fill=\"#3FD08F\"/>\n</svg>\n\nexport default lessBarsIcon;\n","// prettier-ignore\nconst moreBarsIcon = () =><svg width=\"35\" height=\"31\" viewBox=\"0 0 35 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 13C0 12.4477 0.447715 12 1 12H3.26829C3.82058 12 4.26829 12.4477 4.26829 13V30C4.26829 30.5523 3.82058 31 3.26829 31H1C0.447715 31 0 30.5523 0 30V13Z\" fill=\"#3FD08F\"/>\n<path d=\"M25.6099 13C25.6099 12.4477 26.0576 12 26.6099 12H28.8782C29.4304 12 29.8782 12.4477 29.8782 13V30C29.8782 30.5523 29.4304 31 28.8782 31H26.6099C26.0576 31 25.6099 30.5523 25.6099 30V13Z\" fill=\"#3FD08F\"/>\n<path d=\"M5.12207 1C5.12207 0.447716 5.56979 0 6.12207 0H8.39036C8.94265 0 9.39036 0.447715 9.39036 1V30C9.39036 30.5523 8.94265 31 8.39036 31H6.12207C5.56979 31 5.12207 30.5523 5.12207 30V1Z\" fill=\"#3FD08F\"/>\n<path d=\"M20.4878 1C20.4878 0.447716 20.9355 0 21.4878 0H23.7561C24.3084 0 24.7561 0.447715 24.7561 1V30C24.7561 30.5523 24.3084 31 23.7561 31H21.4878C20.9355 31 20.4878 30.5523 20.4878 30V1Z\" fill=\"#3FD08F\"/>\n<path d=\"M10.2439 6C10.2439 5.44772 10.6916 5 11.2439 5H13.5122C14.0645 5 14.5122 5.44772 14.5122 6V30C14.5122 30.5523 14.0645 31 13.5122 31H11.2439C10.6916 31 10.2439 30.5523 10.2439 30V6Z\" fill=\"#3FD08F\"/>\n<path d=\"M30.7317 6C30.7317 5.44772 31.1794 5 31.7317 5H34C34.5523 5 35 5.44772 35 6V30C35 30.5523 34.5523 31 34 31H31.7317C31.1794 31 30.7317 30.5523 30.7317 30V6Z\" fill=\"#3FD08F\"/>\n<path d=\"M15.366 11C15.366 10.4477 15.8137 10 16.366 10H18.6343C19.1865 10 19.6343 10.4477 19.6343 11V30C19.6343 30.5523 19.1865 31 18.6343 31H16.366C15.8137 31 15.366 30.5523 15.366 30V11Z\" fill=\"#3FD08F\"/>\n</svg>\n\nexport default moreBarsIcon;\n","import React from \"react\";\nimport Snail from \"../icons/snail\";\nimport Rocket from \"../icons/rocket\";\nimport styled from \"styled-components\";\nimport PlayIcon from \"../icons/play\";\nimport NextIcon from \"../icons/next\";\nimport PrevIcon from \"../icons/prev\";\nimport LessBarsIcon from \"../icons/lessBars\";\nimport MoreBarsIcon from \"../icons/moreBars\";\n\ninterface props {\n  stepBackRef: React.RefObject<HTMLButtonElement>;\n  stepForwardRef: React.RefObject<HTMLButtonElement>;\n  currentSorter: string;\n  isSortingFinished: boolean;\n  counter: number;\n  playPauseButton: React.RefObject<HTMLButtonElement>;\n  handleSorting: (option: \"toggle\" | \"no toggle\") => void;\n  sliderVal: number;\n  setSliderVal: React.Dispatch<React.SetStateAction<number>>;\n  offset: number;\n  barCount: number;\n  setBarCount: React.Dispatch<React.SetStateAction<number>>;\n  isCurrentlySorting: React.MutableRefObject<boolean>;\n}\n\nconst ControlsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 3rem);\n  gap: 1rem;\n  place-content: center;\n  justify-items: center;\n  align-items: center;\n`;\n\nconst PlayButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.8rem;\n  outline: none;\n  border: none;\n  background-color: #c4c4c4;\n  color: white;\n  border-radius: 10px;\n  transition: all 0.1s ease-in-out;\n\n  &:disabled {\n    opacity: 0.5;\n  }\n\n  & > svg {\n    width: 100%;\n  }\n`;\nconst StepButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.6rem;\n  outline: none;\n  border: none;\n  background-color: #c4c4c4;\n  color: white;\n  border-radius: 10px;\n  width: 2.5rem;\n  height: 2.5rem;\n  transition: all 0.1s ease-in-out;\n\n  & svg {\n    width: 20px;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nconst SliderContainer = styled.div`\n  display: flex;\n  align-items: center;\n  & input {\n    appearance: none;\n    --webkit-appearance: none;\n    background-color: #c4c4c4;\n    height: 6px;\n    border-radius: 5px;\n  }\n  & input::-webkit-slider-thumb {\n    --webkit-appearance: none;\n    appearance: none;\n    background-color: rgb(63, 208, 143);\n    width: 16px;\n    height: 16px;\n    border-radius: 50%;\n    border: none;\n  }\n  & svg {\n    fill: rgb(63, 208, 143);\n    width: 28px;\n    margin: 0.5rem;\n  }\n`;\n\nconst Controls: React.FC<props> = ({\n  offset,\n  counter,\n  currentSorter,\n  handleSorting,\n  isSortingFinished,\n  playPauseButton,\n  setSliderVal,\n  sliderVal,\n  stepBackRef,\n  stepForwardRef,\n  barCount,\n  isCurrentlySorting,\n  setBarCount,\n}) => {\n  return (\n    <div>\n      <ControlsContainer id=\"controls\">\n        <StepButton\n          id=\"stepBack\"\n          ref={stepBackRef}\n          disabled={\n            (currentSorter === \"mergeSort\" && counter > 0) ||\n            // inputArrs[inputArr.length - offset] === undefined ||\n            counter === 0\n          }\n        >\n          <PrevIcon />\n        </StepButton>\n        <PlayButton\n          ref={playPauseButton}\n          disabled={currentSorter === \"mergeSort\" && counter > 0}\n          onClick={() => handleSorting(\"toggle\")}\n        >\n          <PlayIcon />\n        </PlayButton>\n        <StepButton\n          id=\"stepForward\"\n          ref={stepForwardRef}\n          disabled={\n            (currentSorter === \"mergeSort\" && counter > 0) || offset === 0\n          }\n        >\n          <NextIcon />\n        </StepButton>\n      </ControlsContainer>\n      <div\n        style={{\n          marginTop: \"1rem\",\n          display: \"grid\",\n          gridTemplateRows: \"repeat(2, auto)\",\n          placeItems: \"center\",\n          gap: \"0.8rem\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n          }}\n        >\n          <SliderContainer>\n            <Snail />\n            <input\n              type=\"range\"\n              style={{ direction: \"rtl\" }}\n              min=\"1\"\n              max=\"50\"\n              value={sliderVal}\n              onChange={(e) =>\n                setSliderVal(\n                  !(currentSorter === \"mergeSort\" && counter > 0)\n                    ? parseInt(e.target.value)\n                    : sliderVal\n                )\n              }\n            />\n            <Rocket />\n          </SliderContainer>\n          <h3>{((1 / sliderVal) * 15).toFixed(1)}</h3>\n          <p style={{ fontSize: \"0.8rem\" }}>Operations / second</p>\n        </div>\n        <SliderContainer>\n          <LessBarsIcon />\n          <input\n            style={{ width: \"15rem\" }}\n            type=\"range\"\n            min=\"10\"\n            max=\"150\"\n            value={barCount}\n            onChange={(e) =>\n              !isCurrentlySorting.current &&\n              setBarCount(parseInt(e.target.value))\n            }\n          />\n          <MoreBarsIcon />\n        </SliderContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  font-size: 2rem;\n  @media only screen and (max-width: 900px) {\n    font-size: 1.5rem;\n  }\n`;\n\nconst Container = styled.div`\n  margin: 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\nconst SorterSelect = styled.select`\n  font-weight: 700;\n  padding: 0.5rem;\n  padding-right: 1.8rem;\n  border: none;\n  outline: none;\n  border-radius: 5px;\n  background-color: #3fd08f;\n  color: white;\n  appearance: none;\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\nexport const BlackButton = styled.button`\n  font-weight: 600;\n  background-color: #000;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 0.5rem;\n  margin-right: 0.5rem;\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`;\n\ninterface props {\n  counter: number;\n  isSortingFinished: boolean;\n  currentSorter: string;\n  reset: () => void;\n  setCurrentSorter: (value: React.SetStateAction<string>) => void;\n  isCurrentlySorting: React.MutableRefObject<boolean>;\n  barCount: number;\n  setBarCount: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst SortOptions: React.FC<props> = ({\n  counter,\n  currentSorter,\n  isSortingFinished,\n  reset,\n  setCurrentSorter,\n}) => {\n  useEffect(() => {\n    setCurrentSorter(\"bubbleSort\");\n  }, [setCurrentSorter]);\n\n  return (\n    <Container>\n      <div>\n        <Title>Sorter</Title>\n        <p>\n          {counter > 0 && !isSortingFinished\n            ? `${counter} steps`\n            : isSortingFinished\n            ? `Done in ${counter} steps`\n            : \"Unsorted\"}\n        </p>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n        }}\n      >\n        <BlackButton\n          disabled={\n            counter > 0 && currentSorter === \"mergeSort\" && !isSortingFinished\n          }\n          onClick={reset}\n        >\n          {counter > 0 ? \"Reset\" : \"Shuffle\"}\n        </BlackButton>\n        <div style={{ position: \"relative\" }}>\n          <SorterSelect\n            disabled={counter > 0}\n            onChange={(e) => {\n              const selectedSorterName =\n                e.target.selectedOptions[0].textContent;\n              if (selectedSorterName) setCurrentSorter(selectedSorterName);\n            }}\n          >\n            {[\n              { name: \"bubbleSort\", fn: () => setCurrentSorter(\"bubbleSort\") },\n              {\n                name: \"selectionSort\",\n                fn: () => setCurrentSorter(\"selectionSort\"),\n              },\n              {\n                name: \"insertionSort\",\n                fn: () => setCurrentSorter(\"insertionSort\"),\n              },\n              { name: \"mergeSort\", fn: () => setCurrentSorter(\"mergeSort\") },\n              { name: \"quickSort\", fn: () => setCurrentSorter(\"quickSort\") },\n              { name: \"shellSort\", fn: () => setCurrentSorter(\"shellSort\") },\n            ].map((sorter) => (\n              <option key={sorter.name}>{sorter.name}</option>\n            ))}\n          </SorterSelect>\n          {/* prettier-ignore */}\n          <svg style={{position: \"absolute\", right: \"10\", top: \"33%\"}} width=\"10\" height=\"8\" viewBox=\"0 0 15 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M6.39631 10.5333L1.39631 3.86666C0.407453 2.54818 1.34822 0.666656 2.99631 0.666656H12.9963C14.6444 0.666656 15.5852 2.54818 14.5963 3.86666L9.59631 10.5333C8.79631 11.6 7.19631 11.6 6.39631 10.5333Z\" fill=\"white\"/>\n</svg>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default SortOptions;\n","export const __prod = process.env.NODE_ENV === \"production\";\nexport const __prodServer = \"https://v-sort.herokuapp.com\";\nexport const __devServer = \"http://localhost:3001\";\n","// this is a really big App.tsx\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport SortContainer from \"./components/SortContainer\";\nimport SpeedContext from \"./contexts/SpeedContext\";\nimport styled from \"styled-components\";\nimport Controls from \"./components/Controls\";\nimport SortOptions from \"./components/SortOptions\";\nimport { __devServer, __prod, __prodServer } from \"./constants\";\nimport { BlackButton } from \"./components/SortOptions\";\n\nconst Main = styled.div`\n  display: grid;\n  grid-template-columns: 35vw auto;\n  @media only screen and (max-width: 900px) {\n    display: flex;\n    flex-direction: column-reverse;\n    & > *:nth-child(1) {\n      height: auto;\n    }\n    & > *:nth-child(2) {\n      height: 50vh;\n    }\n  }\n`;\n\ninterface props {}\n\nexport interface Input {\n  id: number;\n  val: number;\n}\n\nconst App: React.FC<props> = () => {\n  const initialInputArr = useRef<Input[]>([]);\n  const [inputArr, setInputArr] = useState<Input[]>([]);\n  const isCurrentlySorting = useRef(false);\n  const [isSortingFinished, setIsSortingFinished] = useState(false);\n  const [counter, setCounter] = useState(0);\n  const counterRef = useRef(0);\n  const [currentBar, setCurrentBar] = useState([-1]);\n  const [currentSorter, setCurrentSorter] = useState(\"\");\n  const [sliderVal, setSliderVal] = useState(5);\n  const sortedArr = useRef<Input[]>([]);\n  const operationsInterval = useRef(500);\n  const sortDelayCounter = useRef(0);\n  const [inputArrs, setInputArrs] = useState<Input[][]>([]);\n  const [currentBars, setCurrentBars] = useState<number[][]>([]);\n  const [offset, setOffset] = useState(0);\n  const playPauseButton = useRef<HTMLButtonElement>(null);\n  const { setSpeedContext } = useContext(SpeedContext);\n  const stepBackRef = useRef<HTMLButtonElement>(null);\n  const stepForwardRef = useRef<HTMLButtonElement>(null);\n  const [barCount, setBarCount] = useState(30);\n  const detailsRef = useRef<HTMLDivElement>(null);\n  const [siteViewCount, setSiteViewCount] = useState(-1);\n\n  const process = (prom: Promise<{ status: string; count?: number }>) => {\n    prom.then((data) => {\n      data.status === \"awake\" && data.count && setSiteViewCount(data.count);\n      data.status === \"newVisitor\" && console.log(\"Hey there!\");\n      data.status === \"oldVisitor\" && console.log(\"Welcome back!\");\n    });\n  };\n\n  useEffect(() => {\n    const wakeupReq = fetch(__prod ? __prodServer : __devServer);\n    const visitReq = fetch(\n      __prod ? `${__prodServer}/hello` : `${__devServer}/hello`\n    );\n    Promise.all([wakeupReq, visitReq]).then((reqs) => {\n      reqs.forEach((req) => {\n        process(req.json());\n      });\n    });\n  }, []);\n\n  // a ref can be used to get updated vals in a settimeout\n  // updating ref when the state changes\n  useEffect(() => {\n    counterRef.current = counter;\n  }, [counter]);\n\n  useEffect(() => {\n    /// 1st fn that runs on mount, just sets the values and sets the initialInputArr and inputArr\n    // if (barCount === 30) {\n    setIsSortingFinished(false);\n    setCounter(0);\n    let initialArr = [\n      ...Array.from(Array(barCount)).map((_, idx) => ({\n        id: idx,\n        val: Math.floor(Math.random() * barCount + 1),\n      })),\n    ];\n    initialInputArr.current = [...initialArr];\n    setInputArr([...initialArr]);\n  }, [barCount]);\n\n  // idk why I added this\n  useEffect(() => {\n    sortedArr.current = [...initialInputArr.current].sort(\n      (a, b) => a.val - b.val\n    );\n  }, [isSortingFinished]);\n\n  // updating operation intervals and animationspeeds here\n  useEffect(() => {\n    const newOpsInterval = 100 * sliderVal;\n    operationsInterval.current = newOpsInterval;\n    setSpeedContext((prev) => ({\n      ...prev,\n      operationsInterval: newOpsInterval,\n    }));\n    setSpeedContext((prev) => ({\n      ...prev,\n      swapAnimationDuration: newOpsInterval * 0.95,\n    }));\n  }, [sliderVal, setSpeedContext]);\n\n  // to set the inputArr based on the stepped options\n  useEffect(() => {\n    const inputArrsLength = inputArrs.length;\n    if (offset !== 0) {\n      try {\n        const newInputArr = [...[...inputArrs][inputArrsLength + offset]];\n        const newCurrentBars = [...[...currentBars][inputArrsLength + offset]];\n        setInputArr(newInputArr);\n        setCurrentBar(newCurrentBars);\n      } catch (err) {\n        console.log(\"cannot go back or forward\");\n        if (inputArrsLength + offset > inputArrsLength) {\n          setOffset((prev) => prev - 1);\n        } else setOffset((prev) => prev + 1);\n      }\n    }\n    // I'm just listening to changes to offset, I don't need to run this every time inputArr is set\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [offset]);\n\n  // event handlers for stepBack and stepForward\n  useEffect(() => {\n    const test = document.querySelectorAll(\"#controls button\");\n    test.forEach((button) => {\n      if (button.id === \"stepBack\" || button.id === \"stepForward\") {\n        button.addEventListener(\"click\", () => {\n          button.id === \"stepBack\"\n            ? setOffset((p) => p - 1)\n            : setOffset((p) => p + 1);\n        });\n      }\n    });\n  }, []);\n\n  let handleSorting: (option: \"toggle\" | \"no toggle\") => void;\n\n  const reset = () => {\n    isCurrentlySorting.current = false;\n    setCurrentBar([-1]);\n    if (counter > 0) {\n      initialInputArr.current = [...initialInputArr.current];\n      setInputArr([...initialInputArr.current]);\n    } else {\n      let initialArr = [\n        ...Array.from(Array(barCount)).map((_, idx) => ({\n          id: idx,\n          val: Math.floor(Math.random() * barCount),\n        })),\n      ];\n      initialInputArr.current = [...initialArr];\n      setInputArr([...initialInputArr.current]);\n    }\n    setInputArrs([]);\n    setCurrentBars([]);\n    setCurrentBar([]);\n    setCounter(0);\n    setIsSortingFinished(false);\n    if (playPauseButton.current) {\n      playPauseButton.current.innerHTML = `<svg viewBox=\"0 0 34 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 37.3713V2.43737C0 0.903735 1.65505 -0.0592372 2.98833 0.698632L32.1 17.2463C33.4131 17.9927 33.4567 19.8695 32.1796 20.676L3.06799 39.0623C1.73625 39.9034 0 38.9465 0 37.3713Z\" fill=\"#7F7F7F\"/>\n</svg>`;\n      playPauseButton.current.disabled = false;\n    }\n\n    // handleSorting(\"no toggle\");\n  };\n\n  const init = useCallback(() => {\n    setCurrentBars([]);\n    setInputArrs([]);\n    isCurrentlySorting.current = true;\n    sortDelayCounter.current = 0;\n    setIsSortingFinished(false);\n    setCounter(0);\n    if (stepBackRef.current && stepForwardRef.current) {\n      stepBackRef.current.disabled = isCurrentlySorting.current;\n      stepForwardRef.current.disabled = isCurrentlySorting.current;\n    }\n    return { i: 0, j: 0 };\n  }, []);\n\n  const finish = () => {\n    isCurrentlySorting.current = false;\n    setIsSortingFinished(true);\n    setCurrentBar([-1]);\n    if (playPauseButton.current) {\n      playPauseButton.current.disabled = true;\n      // prettier-ignore\n      playPauseButton.current.innerHTML = `<svg viewBox=\"0 0 34 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 37.3713V2.43737C0 0.903735 1.65505 -0.0592372 2.98833 0.698632L32.1 17.2463C33.4131 17.9927 33.4567 19.8695 32.1796 20.676L3.06799 39.0623C1.73625 39.9034 0 38.9465 0 37.3713Z\" fill=\"#7F7F7F\"/>\n</svg>`\n    }\n  };\n\n  const getCurrentSpeed = () => {\n    return operationsInterval.current;\n  };\n\n  const bubbleSort = useCallback(() => {\n    // instead of using loops like for loop, I'm using setInterval\n    // initializing vars\n    let { i, j } = init();\n    setCurrentBar([inputArr[j].id, inputArr[j + 1].id]);\n    const sort = (ops: number) =>\n      setTimeout(() => {\n        if (!isCurrentlySorting.current) {\n          // if the sorting is paused\n          if (counterRef.current === 0) {\n            // if the array is reset\n            return;\n          } else {\n            // if the array is not reset, just run the fn again, but do not execute anything in the settimeout fn\n            sort(getCurrentSpeed());\n            return;\n          }\n        } // else if the sorting is not paused\n        setOffset(0);\n        // the main looping\n        if (i < inputArr.length - 1) {\n          // the value checker part of the first for loop ☝\n          if (j < inputArr.length - i - 1) {\n            // the value checker part of the second for loop ☝\n            setCounter((prev) => prev + 1);\n            // TODO: show iteration count\n            if (inputArr[j].val > inputArr[j + 1].val) {\n              const temp = inputArr[j];\n              inputArr[j] = inputArr[j + 1];\n              inputArr[j + 1] = temp;\n            } else {\n              setCurrentBar([inputArr[j + 1].id, inputArr[j].id]);\n            }\n            // swap if the left element is more than right element\n            setInputArrs((prev) => [...prev, [...inputArr]]);\n            setInputArr([...inputArr]);\n            setCurrentBars((prev) => [\n              ...prev,\n              [inputArr[j + 2]?.id, inputArr[j + 1].id],\n            ]);\n            setCurrentBar([inputArr[j + 2]?.id, inputArr[j + 1].id]);\n            // set the array after swapping\n            j++;\n            // setCurrentBar(i + j);\n            // increment second loop variable\n          } else {\n            // if the second loop is finished, reset second loop var, increment first loop var\n            j = 0;\n            i++;\n          }\n          sort(getCurrentSpeed());\n        }\n        // if the first loop is over, stop the intervals\n        else {\n          finish();\n        }\n        // TODO: allow for dynamic speed\n      }, ops);\n    sort(getCurrentSpeed());\n  }, [inputArr, init]);\n\n  const insertionSort = useCallback(() => {\n    let { i, j } = init();\n    // -9 only when the var needs to be reinitialized\n    // in while loops, the vars need to retain their prev values\n    // if they need to be changed after the while loop is finished, set them to -9\n    j = -9;\n    i = 1;\n    let key: Input;\n    const sort = (ops: number) =>\n      setTimeout(() => {\n        if (!isCurrentlySorting.current) {\n          if (counterRef.current === 0) {\n            return;\n          } else {\n            sort(getCurrentSpeed());\n            return;\n          }\n        }\n        setOffset(0);\n        setCounter((c) => c + 1);\n        if (i < inputArr.length) {\n          if (j === -9) {\n            key = inputArr[i];\n            j = i - 1;\n          }\n          // the while loop ⬇\n          if (j >= 0 && inputArr[j].val > key.val) {\n            inputArr[j + 1] = inputArr[j];\n            j = j - 1;\n            setInputArrs((prev) => [...prev, [...inputArr]]);\n            setCurrentBars((prev) => [\n              ...prev,\n              [inputArr[j + 2]?.id, inputArr[j + 1].id],\n            ]);\n            setCurrentBar([inputArr[j]?.id, inputArr[i]?.id]);\n          } else {\n            // the part after the while loop ⬇\n            inputArr[j + 1] = key;\n            j = -9;\n            setInputArrs((prev) => [...prev, [...inputArr]]);\n            setCurrentBars((prev) => [\n              ...prev,\n              [inputArr[j + 2]?.id, inputArr[j + 1]?.id],\n            ]);\n            setCurrentBar([inputArr[i]?.id]);\n            i++;\n            setInputArr([...inputArr]);\n          }\n          sort(getCurrentSpeed());\n        } else {\n          finish();\n        }\n      }, ops);\n    sort(getCurrentSpeed());\n  }, [inputArr, init]);\n\n  const selectionSort = useCallback(() => {\n    let { i, j } = init();\n    i = 1;\n    j = -9;\n    let lowestPos: number;\n    const sort = (ops: number) =>\n      setTimeout(() => {\n        if (!isCurrentlySorting.current) {\n          if (counterRef.current === 0) {\n            return;\n          } else {\n            sort(getCurrentSpeed());\n            return;\n          }\n        }\n        setOffset(0);\n        setCounter((c) => c + 1);\n        if (i < inputArr.length) {\n          if (j === -9) {\n            lowestPos = i - 1;\n            j = i;\n          }\n          setInputArrs((prev) => [...prev, [...inputArr]]);\n          setCurrentBars((prev) => [\n            ...prev,\n            [inputArr[j + 2]?.id, inputArr[j + 1]?.id],\n          ]);\n          setCurrentBar([inputArr[j - 1].id, inputArr[lowestPos].id]);\n          if (j < inputArr.length) {\n            if (inputArr[j].val < inputArr[lowestPos].val) {\n              lowestPos = j;\n            }\n            j++;\n          } else {\n            [inputArr[lowestPos], inputArr[i - 1]] = [\n              inputArr[i - 1],\n              inputArr[lowestPos],\n            ];\n            setInputArrs((prev) => [...prev, [...inputArr]]);\n            setCurrentBars((prev) => [\n              ...prev,\n              [inputArr[j + 2]?.id, inputArr[j + 1]?.id],\n            ]);\n            setInputArr([...inputArr]);\n            i++;\n            j = -9;\n          }\n          sort(getCurrentSpeed());\n        } else {\n          finish();\n        }\n      }, ops);\n    sort(getCurrentSpeed());\n  }, [inputArr, init]);\n\n  const mergeSort = () => {\n    init();\n    const merge = (\n      inputArr: Input[],\n      start: number,\n      mid: number,\n      end: number\n    ) => {\n      sortDelayCounter.current++;\n      setTimeout(() => {\n        // cannot pause, or alter speed in merge sort, I just don't know how to do merge sort iteratively\n        setCurrentBar(inputArr.slice(start, end).map((i) => i.id));\n        if (start === 0 && end === inputArr.length - 1) {\n          finish();\n        }\n        let start2 = mid + 1;\n        if (inputArr[mid].val <= inputArr[start2].val) {\n          setCounter((c) => c + 1);\n          return;\n        }\n        while (start <= mid && start2 <= end) {\n          if (inputArr[start].val <= inputArr[start2].val) {\n            start++;\n          } else {\n            const val = inputArr[start2];\n            let idx = start2;\n            while (idx !== start) {\n              inputArr[idx] = inputArr[idx - 1];\n              idx--;\n            }\n            inputArr[start] = val;\n            start++;\n            start2++;\n            mid++;\n            setInputArr([...inputArr]);\n            setCounter((c) => c + 1);\n          }\n        }\n      }, getCurrentSpeed() * sortDelayCounter.current);\n    };\n    const mergeSort = (inputArr: Input[], l: number, h: number) => {\n      if (l < h) {\n        setCounter((c) => c + 1);\n        const mid = Math.floor((l + h) / 2);\n        mergeSort(inputArr, l, mid);\n        mergeSort(inputArr, mid + 1, h);\n        merge(inputArr, l, mid, h);\n      }\n    };\n\n    mergeSort(inputArr, 0, initialInputArr.current.length - 1);\n  };\n\n  const quickSort = useCallback(() => {\n    // https://www.geeksforgeeks.org/iterative-quick-sort/\n    // here the quick sort function is being run iteratively instead of recursively,\n    // the stack holds the values instead of the function call stack if in recursion\n    let { i, j: comparisonIdx } = init();\n    const quickSort = (inputArr: Input[], start: number, end: number) => {\n      let stack: number[] = [];\n      let top = -1;\n      let isPartitioning = false;\n      i = -1;\n      comparisonIdx = -1;\n      stack[++top] = start;\n      stack[++top] = end;\n      const sort = (ops: number) =>\n        setTimeout(() => {\n          if (!isCurrentlySorting.current) {\n            if (counterRef.current === 0) {\n              return;\n            } else {\n              sort(getCurrentSpeed());\n              return;\n            }\n          }\n          setOffset(0);\n          setCounter((c) => c + 1);\n          if (top >= 0 || isPartitioning) {\n            if (!isPartitioning) {\n              end = stack[top--];\n              start = stack[top--];\n            }\n            // partitioning\n            // suppposed to return comparisonIdx\n            isPartitioning = true;\n            const pivot = inputArr[end];\n            if (comparisonIdx === -1) {\n              comparisonIdx = start;\n              i = start;\n            }\n            if (i < end) {\n              setInputArrs((prev) => [...prev, [...inputArr]]);\n              setCurrentBars((prev) => [...prev, [inputArr[i].id, pivot.id]]);\n              setCurrentBar([inputArr[i].id, pivot.id]);\n              if (inputArr[i].val <= pivot.val) {\n                [inputArr[i], inputArr[comparisonIdx]] = [\n                  inputArr[comparisonIdx],\n                  inputArr[i],\n                ];\n                setInputArrs((prev) => [...prev, [...inputArr]]);\n                setCurrentBars((prev) => [...prev, [inputArr[i].id, pivot.id]]);\n                setInputArr([...inputArr]);\n                comparisonIdx++;\n              }\n              i++;\n            } else {\n              [inputArr[comparisonIdx], inputArr[end]] = [\n                inputArr[end],\n                inputArr[comparisonIdx],\n              ];\n              setInputArrs((prev) => [...prev, [...inputArr]]);\n              setInputArr([...inputArr]);\n              setCurrentBars((prev) => [...prev, [inputArr[i].id, pivot.id]]);\n              if (comparisonIdx - 1 > start) {\n                stack[++top] = start;\n                stack[++top] = comparisonIdx - 1;\n              }\n              if (comparisonIdx + 1 < end) {\n                stack[++top] = comparisonIdx + 1;\n                stack[++top] = end;\n              }\n              // I could use pop, but that's giving me a weird TS error\n              // it says that I cannot assign a (number | undefined) type to number\n              // that could be because a pop might return undefined when the array is empty\n              isPartitioning = false;\n              comparisonIdx = -1;\n              i = -1;\n            }\n          } else {\n            finish();\n            return;\n          }\n          sort(getCurrentSpeed());\n        }, ops);\n      sort(getCurrentSpeed());\n    };\n\n    quickSort(inputArr, 0, inputArr.length - 1);\n  }, [inputArr, init]);\n\n  const shellSort = () => {\n    let { i, j: gap } = init();\n    gap = Math.floor(inputArr.length / 2);\n    let end = -1;\n    let idxs: number[] = [];\n    let idx = -1;\n    const sort = (ops: number) =>\n      setTimeout(() => {\n        if (!isCurrentlySorting.current) {\n          if (counterRef.current === 0) {\n            return;\n          } else {\n            sort(getCurrentSpeed());\n            return;\n          }\n        }\n        setOffset(0);\n        if (gap >= 1) {\n          if (i < inputArr.length) {\n            if (end === -1) {\n              end = i + gap;\n            }\n            if (end < inputArr.length) {\n              if (!idxs.length) {\n                let j = (i + gap) % gap;\n                while (j < inputArr.length) {\n                  idxs.push(j);\n                  j += gap;\n                }\n              }\n              if (idx === -1) {\n                idx = idxs.length - 1;\n              }\n              if (idx > 0) {\n                const b = idxs[idx];\n                const a = idxs[idx - 1];\n                if (b <= end) {\n                  setCurrentBar([inputArr[a].id, inputArr[b].id]);\n                  setCounter((c) => c + 1);\n                  if (inputArr[a].val > inputArr[b].val) {\n                    [inputArr[a], inputArr[b]] = [inputArr[b], inputArr[a]];\n                    setInputArrs((prev) => [...prev, [...inputArr]]);\n                    setInputArr([...inputArr]);\n                  } else setInputArrs((prev) => [...prev, [...inputArr]]);\n                  setCurrentBars((prev) => [\n                    ...prev,\n                    [inputArr[a].id, inputArr[b].id],\n                  ]);\n                }\n                idx--;\n              } else {\n                setCurrentBar([]);\n                setCurrentBars((prev) => [...prev, []]);\n                setInputArrs((prev) => [...prev, [...inputArr]]);\n                end = -1;\n                i++;\n                idx = -1;\n                idxs = [];\n              }\n            } else {\n              setCurrentBar([]);\n              setCurrentBars((prev) => [...prev, []]);\n              setInputArrs((prev) => [...prev, [...inputArr]]);\n              end = -1;\n              i++;\n              idx = -1;\n              idxs = [];\n              gap = Math.floor(gap / 2);\n              i = 0;\n              sort(0);\n            }\n          } else {\n            i = 0;\n            gap = Math.floor(gap / 2);\n          }\n          sort(getCurrentSpeed());\n        } else {\n          finish();\n        }\n      }, ops);\n    sort(getCurrentSpeed());\n  };\n\n  handleSorting = (option: \"toggle\" | \"no toggle\") => {\n    if (option === \"toggle\")\n      isCurrentlySorting.current = !isCurrentlySorting.current;\n\n    if (currentSorter !== \"mergeSort\") {\n      if (\n        playPauseButton.current &&\n        stepBackRef.current &&\n        stepForwardRef.current\n      ) {\n        playPauseButton.current.innerHTML = !isCurrentlySorting.current\n          ? // prettier-ignore play\n            `<svg viewBox=\"0 0 34 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 37.3713V2.43737C0 0.903735 1.65505 -0.0592372 2.98833 0.698632L32.1 17.2463C33.4131 17.9927 33.4567 19.8695 32.1796 20.676L3.06799 39.0623C1.73625 39.9034 0 38.9465 0 37.3713Z\" fill=\"#7F7F7F\"/>\n</svg>`\n          : // prettier-ignore pause\n            `<svg viewBox=\"0 0 34 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 5C0 2.23858 2.23858 0 5 0H9C11.7614 0 14 2.23858 14 5V35C14 37.7614 11.7614 40 9 40H5C2.23858 40 0 37.7614 0 35V5Z\" fill=\"#7F7F7F\"/>\n<path d=\"M20 5C20 2.23858 22.2386 0 25 0H29C31.7614 0 34 2.23858 34 5V35C34 37.7614 31.7614 40 29 40H25C22.2386 40 20 37.7614 20 35V5Z\" fill=\"#7F7F7F\"/>\n</svg>\n\n`;\n        stepBackRef.current.disabled = isCurrentlySorting.current;\n        stepForwardRef.current.disabled = isCurrentlySorting.current;\n      }\n    }\n    if (isCurrentlySorting.current) {\n      if (counter === 0)\n        switch (currentSorter) {\n          case \"bubbleSort\":\n            bubbleSort();\n            break;\n          case \"selectionSort\":\n            selectionSort();\n            break;\n          case \"insertionSort\":\n            insertionSort();\n            break;\n          case \"mergeSort\":\n            mergeSort();\n            break;\n          case \"quickSort\":\n            quickSort();\n            break;\n          case \"shellSort\":\n            shellSort();\n            break;\n          case \"\":\n            break;\n          default:\n            alert(\"this shouldn't happen.\");\n            break;\n        }\n    }\n  };\n\n  return (\n    <Main>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n          backgroundColor: \"#eee\",\n        }}\n      >\n        <div>\n          <SortOptions\n            barCount={barCount}\n            isCurrentlySorting={isCurrentlySorting}\n            setBarCount={setBarCount}\n            counter={counter}\n            currentSorter={currentSorter}\n            isSortingFinished={isSortingFinished}\n            reset={reset}\n            setCurrentSorter={setCurrentSorter}\n          />\n          <Controls\n            barCount={barCount}\n            isCurrentlySorting={isCurrentlySorting}\n            setBarCount={setBarCount}\n            counter={counter}\n            currentSorter={currentSorter}\n            handleSorting={handleSorting}\n            isSortingFinished={isSortingFinished}\n            offset={offset}\n            playPauseButton={playPauseButton}\n            setSliderVal={setSliderVal}\n            sliderVal={sliderVal}\n            stepBackRef={stepBackRef}\n            stepForwardRef={stepForwardRef}\n          />\n        </div>\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            marginTop: \"1rem\",\n          }}\n        >\n          <BlackButton\n            style={{\n              width: \"90%\",\n              margin: \"1rem\",\n            }}\n            onClick={(e) => {\n              if (detailsRef.current) {\n                if (detailsRef.current.style.maxHeight === \"20rem\") {\n                  e.currentTarget.textContent = \"About the Project\";\n                  detailsRef.current.style.maxHeight = \"0px\";\n                  detailsRef.current.style.margin = \"0\";\n                } else {\n                  e.currentTarget.textContent = \"Okay, got it\";\n                  detailsRef.current.style.maxHeight = \"20rem\";\n                  detailsRef.current.style.margin = \"1.5rem\";\n                  detailsRef.current.style.marginTop = \"0.5rem\";\n                }\n              }\n            }}\n          >\n            About the Project\n          </BlackButton>\n          <div\n            ref={detailsRef}\n            style={{\n              transition: \"all 0.2s ease-in-out\",\n              overflowY: \"hidden\",\n              margin: \"1.5rem\",\n              maxHeight: \"0rem\",\n            }}\n          >\n            <p>\n              {`\n                Built with React & styled-components.\n                Powered by VVCE ACM Student Chapter. \n              `}\n            </p>\n            <h3 style={{ margin: \"0.4rem 0\" }}>How to use:</h3>\n            <ul style={{ marginLeft: \"1rem\" }}>\n              <li>Select an algorithm </li>\n              <li>Play the visualizer</li>\n              <li>To go back a step, pause and step back</li>\n              <li>\n                After the array is sorted, press the <strong>Reset</strong>{\" \"}\n                button to bring the array back to its original unsorted order.\n              </li>\n              <li>\n                Pro tip: Use the <strong>Reset</strong> to compare between\n                different algorithms for the same array.\n              </li>\n            </ul>\n            {siteViewCount !== 1 && (\n              <p>\n                Views: <strong>{siteViewCount}</strong>\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n      <SortContainer\n        barCount={barCount}\n        counter={counter}\n        inputArr={inputArr}\n        initialInputArr={initialInputArr.current}\n        finishedSorting={isSortingFinished}\n        currentBar={currentBar}\n      />\n    </Main>\n  );\n};\n\nexport default App;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles/main.css\";\nimport SpeedContext, { defaultSpeeds } from \"./contexts/SpeedContext\";\n\nconst Index = () => {\n  const [speedContext, setSpeedContext] = useState(defaultSpeeds);\n  return (\n    // @ts-ignore\n    <SpeedContext.Provider value={{ speedContext, setSpeedContext }}>\n      <App />\n    </SpeedContext.Provider>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}